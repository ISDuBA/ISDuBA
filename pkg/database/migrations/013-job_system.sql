-- This file is Free Software under the Apache-2.0 License
-- without warranty, see README.md and LICENSES/Apache-2.0.txt for details.
--
-- SPDX-License-Identifier: Apache-2.0
--
-- SPDX-FileCopyrightText: 2024 German Federal Office for Information Security (BSI) <https://www.bsi.bund.de>
-- Software-Engineering: 2024 Intevation GmbH <https://intevation.de>

CREATE TABLE IF NOT EXISTS jobs (
    id                      int       PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                    varchar   NOT NULL,
    insecure                bool      NOT NULL DEFAULT FALSE,
    ignore_signature_check  bool      NOT NULL DEFAULT FALSE,
    http_headers            varchar[] NOT NULL DEFAULT array[]::varchar[],
    client_certs            bytea,
    client_key              varchar,
    client_passphrase       varchar,
    rate                    float,
    worker                  int       NOT NULL DEFAULT 1,
    start_range             timestamp with time zone,
    end_range               timestamp with time zone,
    ignore_pattern          varchar,
    temporary               bool      NOT NULL DEFAULT FALSE,

    domains                 varchar[] NOT NULL,

    UNIQUE (name)
);

CREATE TYPE status_type AS ENUM(
    'QUEUED', 'RUNNING', 'ABORTED', 'FAILED', 'COMPLETED');

CREATE TABLE IF NOT EXISTS tasks (
    id                      int       PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created                 timestamp NOT NULL DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
    job_id                  int       NOT NULL REFERENCES jobs(id) ON DELETE CASCADE,
    log_file                varchar,
    status                  status_type
);

CREATE OR REPLACE FUNCTION job_delete_check()
RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT 1 FROM tasks WHERE tasks.job_id = OLD.id AND tasks.status = 'RUNNING' OR tasks.status = 'QUEUED') THEN
        RAISE EXCEPTION 'can not delete jobs with running tasks';
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_delete_job
    BEFORE DELETE ON jobs
    FOR EACH ROW EXECUTE PROCEDURE job_delete_check();

CREATE UNIQUE INDEX active_tasks ON tasks(job_id) WHERE status = 'QUEUED' OR status = 'RUNNING';

CREATE TABLE IF NOT EXISTS cron (
    id                      int       PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                    varchar   NOT NULL,
    job_id                  int       REFERENCES jobs(id) ON DELETE CASCADE,
    cron_timing             varchar   NOT NULL,

    UNIQUE (name)
);

--
-- permissions
--
GRANT INSERT, DELETE, SELECT, UPDATE ON jobs TO {{ .User | sanitize }};
GRANT INSERT, DELETE, SELECT, UPDATE ON tasks TO {{ .User | sanitize }};
GRANT INSERT, DELETE, SELECT, UPDATE ON cron TO {{ .User | sanitize }};
