-- This file is Free Software under the Apache-2.0 License
-- without warranty, see README.md and LICENSES/Apache-2.0.txt for details.
--
-- SPDX-License-Identifier: Apache-2.0
--
-- SPDX-FileCopyrightText: 2025 German Federal Office for Information Security (BSI) <https://www.bsi.bund.de>
-- Software-Engineering: 2025 Intevation GmbH <https://intevation.de>

BEGIN;

ALTER TABLE advisories ADD column id int GENERATED BY DEFAULT AS IDENTITY;
ALTER TABLE documents ADD column advisories_id int;

UPDATE documents d SET advisories_id = (
    SELECT id FROM advisories a
    WHERE (d.tracking_id, d.publisher) = (a.tracking_id, a.publisher)
);

ALTER TABLE documents ALTER COLUMN advisories_id SET NOT NULL;

ALTER TABLE documents DROP CONSTRAINT documents_tracking_id_publisher_fkey;
ALTER TABLE advisories DROP CONSTRAINT advisories_pkey;

ALTER TABLE advisories ADD PRIMARY KEY (id);
ALTER TABLE advisories ADD UNIQUE(tracking_id, publisher);
ALTER TABLE documents ADD CONSTRAINT documents_advisories_id_fkey
    FOREIGN KEY (advisories_id) REFERENCES advisories(id) ON DELETE CASCADE;

ALTER TABLE documents DROP CONSTRAINT documents_tracking_id_publisher_version_rev_history_length_key;
ALTER TABLE documents ADD UNIQUE (advisories_id, version, rev_history_length);

DROP INDEX only_one_latest_constraint;
CREATE UNIQUE INDEX only_one_latest_constraint ON documents (advisories_id) WHERE latest;

DROP TRIGGER delete_document ON documents;
DROP TRIGGER insert_document ON documents;

DROP FUNCTION create_advisory;

-- update_advisory checks if the new document is newer than the old one.
CREATE FUNCTION update_advisory() RETURNS trigger AS $$
    DECLARE
        doc_tracking_id  text;
        doc_publisher    text;
        adv_id           int;
        old_id           int;
        old_rev_length   int;
        old_release_date timestamptz;
    BEGIN
        SELECT document #>> '{document,tracking,id}',
               document #>> '{document,publisher,name}'
            INTO doc_tracking_id, doc_publisher
            FROM documents;

        -- Importing a new documents resets the state of the advisory.
        UPDATE advisories SET state = 'new' WHERE id = NEW.advisories_id;

        SELECT id, rev_history_length, current_release_date
            INTO old_id, old_rev_length, old_release_date
            FROM documents
            WHERE latest AND advisories_id = NEW.advisories_id;

        IF NOT FOUND THEN -- No latest -> we are
            UPDATE documents SET latest = TRUE WHERE id = NEW.id;
        ELSE
            -- Check if the new record is in fact newer than the old one.
            IF NEW.current_release_date > old_release_date OR
               (NEW.current_release_date = old_release_date AND
                NEW.rev_history_length > old_rev_length)
            THEN
                -- Take over lead.
                UPDATE documents SET latest = FALSE WHERE id = old_id;
                UPDATE documents SET latest = TRUE  WHERE id = NEW.id;
            END IF;
        END IF;
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER insert_document
    AFTER INSERT
    ON documents
    FOR EACH ROW EXECUTE FUNCTION update_advisory();

DROP FUNCTION delete_advisory;
CREATE FUNCTION delete_advisory() RETURNS trigger AS $$
    DECLARE
        lead_id int;
    BEGIN
        -- Update is only needed if deleted one was latest.
        IF OLD.latest THEN
            SELECT id
                INTO lead_id
                FROM documents
                WHERE advisories_id = OLD.id
                ORDER BY current_release_date DESC, rev_history_length DESC;
            IF FOUND THEN
                UPDATE documents SET latest = TRUE WHERE id = lead_id;
            ELSE -- No documents for advisory -> Delete advisory.
                DELETE FROM advisories WHERE id = OLD.id;
            END IF;
        END IF;
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_document AFTER DELETE ON documents
    FOR EACH ROW EXECUTE FUNCTION delete_advisory();

-- Comments
DROP TRIGGER decrement_comments ON comments;
DROP TRIGGER increment_comments ON comments;
DROP FUNCTION decr_comments;
DROP FUNCTION incr_comments;

-- Trigger functions to update cached comment count per advisory.
CREATE FUNCTION incr_comments() RETURNS trigger AS $$
    BEGIN
        UPDATE advisories
            SET comments = comments + 1
        WHERE
            id = (SELECT advisories_id
                FROM documents
                WHERE id = OLD.documents_id);
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION decr_comments() RETURNS trigger AS $$
    BEGIN
        UPDATE advisories
            SET comments = greatest(0, comments - 1)
        WHERE
            id = (SELECT advisories_id
                FROM documents
                WHERE id = OLD.documents_id);
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER increment_comments
    AFTER INSERT
    ON comments
    FOR EACH ROW EXECUTE FUNCTION incr_comments();

CREATE TRIGGER decrement_comments
    AFTER DELETE
    ON comments
    FOR EACH ROW EXECUTE FUNCTION decr_comments();

-- events
DROP TRIGGER update_recent ON events_log;
DROP FUNCTION upd_recent;

-- Trigger to update cached recent value of advisory.
CREATE FUNCTION upd_recent() RETURNS trigger AS $$
    BEGIN
        UPDATE advisories
            SET recent = greatest(recent, NEW.time)
        WHERE
            id = (SELECT advisories_id
                FROM documents
                WHERE id = NEW.documents_id);
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_recent
    AFTER INSERT OR UPDATE
    ON events_log
    FOR EACH ROW EXECUTE FUNCTION upd_recent();

-- Finally remove data from the documents table.

ALTER TABLE documents
    DROP COLUMN tracking_id,
    DROP COLUMN publisher;

COMMIT;
