-- This file is Free Software under the Apache-2.0 License
-- without warranty, see README.md and LICENSES/Apache-2.0.txt for details.
--
-- SPDX-License-Identifier: Apache-2.0
--
-- SPDX-FileCopyrightText: 2024 German Federal Office for Information Security (BSI) <https://www.bsi.bund.de>
-- Software-Engineering: 2024 Intevation GmbH <https://intevation.de>

CREATE TABLE unique_cves (
    id  int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    cve text NOT NULL UNIQUE
);

CREATE TABLE documents_cves (
    documents_id int NOT NULL REFERENCES documents(id)   ON DELETE CASCADE,
    cve_id       int NOT NULL REFERENCES unique_cves(id) ON DELETE CASCADE,
    UNIQUE(documents_id, cve_id)
);

-- Fill CVEs from documents into tables.

WITH cves_from_document AS (
    SELECT
        id AS doc_id,
        jsonb_array_elements_text(jsonb_path_query_array(document, '$.vulnerabilities."cve"')) AS cve
    FROM documents
),
inserted AS (
    INSERT INTO unique_cves (cve)
    SELECT cve FROM cves_from_document
    ON     CONFLICT DO NOTHING
    RETURNING id, cve
),
selected AS (
    SELECT id, unique_cves.cve AS cve
    FROM unique_cves JOIN cves_from_document ON unique_cves.cve = cves_from_document.cve
),
resolved AS (
    SELECT * FROM selected
    UNION ALL
    SELECT * FROM inserted
)
INSERT INTO documents_cves (documents_id, cve_id)
SELECT doc_id, resolved.id
FROM cves_from_document JOIN resolved ON cves_from_document.cve = resolved.cve;

-- Trigger
CREATE FUNCTION extract_cves() RETURNS TRIGGER AS $$
    BEGIN
        DELETE FROM documents_cves WHERE documents_id = NEW.id;
        WITH cves_from_document AS (
            SELECT
                id AS doc_id,
                jsonb_array_elements_text(jsonb_path_query_array(document, '$.vulnerabilities."cve"')) AS cve
            FROM documents
            WHERE id = NEW.id
        ),
        inserted AS (
            INSERT INTO unique_cves (cve)
            SELECT cve FROM cves_from_document
            ON     CONFLICT DO NOTHING
            RETURNING id, cve
        ),
        selected AS (
            SELECT id, unique_cves.cve AS cve
            FROM unique_cves JOIN cves_from_document ON unique_cves.cve = cves_from_document.cve
        ),
        resolved AS (
            SELECT * FROM selected
            UNION ALL
            SELECT * FROM inserted
        )
        INSERT INTO documents_cves (documents_id, cve_id)
        SELECT doc_id, resolved.id
        FROM cves_from_document JOIN resolved ON cves_from_document.cve = resolved.cve;
        RETURN NULL;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER extract_cves_trigger_insert AFTER INSERT
    ON documents
    FOR EACH ROW
    EXECUTE FUNCTION extract_cves();

CREATE TRIGGER extract_cves_trigger_update AFTER UPDATE
    ON documents
    FOR EACH ROW
    WHEN (NEW.document <> OLD.document)
    EXECUTE FUNCTION extract_cves();

GRANT INSERT, DELETE, SELECT, UPDATE ON unique_cves    TO {{ .User | sanitize }};
GRANT INSERT, DELETE, SELECT, UPDATE ON documents_cves TO {{ .User | sanitize }};
