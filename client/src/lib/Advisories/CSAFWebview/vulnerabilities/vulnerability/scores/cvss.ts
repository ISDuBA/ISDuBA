// This file is Free Software under the Apache-2.0 License
// without warranty, see README.md and LICENSES/Apache-2.0.txt for details.
//
// SPDX-License-Identifier: Apache-2.0
//
// SPDX-FileCopyrightText: 2025 German Federal Office for Information Security (BSI) <https://www.bsi.bund.de>
//  Software-Engineering: 2025 Intevation GmbH <https://intevation.de>

const getRangeOfCVSSSeverity = (severity: string): number[] => {
  const sev = severity.toLowerCase();
  if (sev === "none") {
    return [0, 0];
  } else if (sev === "low") {
    return [0.1, 3.9];
  } else if (sev === "medium") {
    return [4.0, 6.9];
  } else if (sev === "high") {
    return [7.0, 8.9];
  } else {
    return [9.0, 10];
  }
};

/**
 * This method is intended to be used by the method Array.sort().
 * @param a CVSS2/CVSS3 score object
 * @param b CVSS2/CVSS3 score object
 * @returns {number}
 */
const compareScores = (a: any, b: any): number => {
  if (a.baseScore !== undefined && b.baseScore !== undefined) {
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    }
    return 0;
  } else if (a.baseScore !== undefined && b.baseScore === undefined) {
    const range = getRangeOfCVSSSeverity(b.baseSeverity);
    if (a.baseScore < range[0]) {
      return -1;
    } else if (a.baseScore > range[1]) {
      return 1;
    }
  } else if (a.baseScore === undefined && b.baseScore !== undefined) {
    const range = getRangeOfCVSSSeverity(a.baseSeverity);
    if (range[1] < b.baseScore) {
      return -1;
    } else if (range[0] > b.baseScore) {
      return 1;
    }
  } else {
    const rangeA = getRangeOfCVSSSeverity(a.baseSeverity);
    const rangeB = getRangeOfCVSSSeverity(b.baseSeverity);
    if (rangeA[0] < rangeB[0]) {
      return -1;
    } else if (rangeA[0] > rangeB[0]) {
      return 1;
    }
  }
  return 0;
};

export { compareScores };
